This function adds 2 numbers and returns the sum
The input can be either a float or an integer.
If a float is given, the decimal part is truncated

::

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()
	>>> type(bg)
	<class '7-base_geometry.BaseGeometry'>

	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented
	>>> bg.integer_validator('age', 17)
	>>> bg.integer_validator('age', '17')
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

	>>> bg.integer_validator('name', 'ALX')
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

	>>> bg.integer_validator('name', True)
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

	>>> bg.integer_validator('name', 12.5)
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

	>>> bg.integer_validator('name', float('inf'))
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

	>>> bg.integer_validator('age', -4)
	Traceback (most recent call last):
	...
	ValueError: age must be greater than 0

	>>> bg.integer_validator('age', 0)
	Traceback (most recent call last):
	...
	ValueError: age must be greater than 0

	>>> bg.area(12)
	Traceback (most recent call last):
	...
	TypeError: area() takes 1 positional argument but 2 were given

	>>> bg.integer_validator('name')
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'


	>>> bg.integer_validator('name', 12, 'lol')
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given

	>>> doc = BaseGeometry = __import__('7-base_geometry').__doc__
	>>> len(doc) > 1
	True
